/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NotificationType {
    #[serde(rename = "friendRequest")]
    FriendRequest,
    #[serde(rename = "invite")]
    Invite,
    #[serde(rename = "inviteResponse")]
    InviteResponse,
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "requestInvite")]
    RequestInvite,
    #[serde(rename = "requestInviteResponse")]
    RequestInviteResponse,
    #[serde(rename = "votetokick")]
    Votetokick,
}

impl std::fmt::Display for NotificationType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FriendRequest => write!(f, "friendRequest"),
            Self::Invite => write!(f, "invite"),
            Self::InviteResponse => write!(f, "inviteResponse"),
            Self::Message => write!(f, "message"),
            Self::RequestInvite => write!(f, "requestInvite"),
            Self::RequestInviteResponse => write!(f, "requestInviteResponse"),
            Self::Votetokick => write!(f, "votetokick"),
        }
    }
}

impl Default for NotificationType {
    fn default() -> NotificationType {
        Self::FriendRequest
    }
}

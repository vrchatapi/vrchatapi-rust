/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EconomyAccount {
    #[serde(
        rename = "accountActivatedOn",
        deserialize_with = "Option::deserialize"
    )]
    pub account_activated_on: Option<String>,
    #[serde(rename = "accountId", deserialize_with = "Option::deserialize")]
    pub account_id: Option<String>,
    #[serde(rename = "blocked")]
    pub blocked: bool,
    #[serde(rename = "canSpend")]
    pub can_spend: bool,
    #[serde(rename = "source")]
    pub source: String,
    /// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl EconomyAccount {
    pub fn new(
        account_activated_on: Option<String>,
        account_id: Option<String>,
        blocked: bool,
        can_spend: bool,
        source: String,
        user_id: String,
    ) -> EconomyAccount {
        EconomyAccount {
            account_activated_on,
            account_id,
            blocked,
            can_spend,
            source,
            user_id,
        }
    }
}

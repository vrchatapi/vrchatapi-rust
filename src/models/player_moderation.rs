/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerModeration {
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sourceDisplayName")]
    pub source_display_name: String,
    /// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
    #[serde(rename = "sourceUserId")]
    pub source_user_id: String,
    #[serde(rename = "targetDisplayName")]
    pub target_display_name: String,
    /// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
    #[serde(rename = "targetUserId")]
    pub target_user_id: String,
    #[serde(rename = "type")]
    pub r#type: models::PlayerModerationType,
}

impl PlayerModeration {
    pub fn new(
        created: String,
        id: String,
        source_display_name: String,
        source_user_id: String,
        target_display_name: String,
        target_user_id: String,
        r#type: models::PlayerModerationType,
    ) -> PlayerModeration {
        PlayerModeration {
            created,
            id,
            source_display_name,
            source_user_id,
            target_display_name,
            target_user_id,
            r#type,
        }
    }
}

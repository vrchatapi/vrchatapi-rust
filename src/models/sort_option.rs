/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SortOption {
    #[serde(rename = "popularity")]
    Popularity,
    #[serde(rename = "heat")]
    Heat,
    #[serde(rename = "trust")]
    Trust,
    #[serde(rename = "shuffle")]
    Shuffle,
    #[serde(rename = "random")]
    Random,
    #[serde(rename = "favorites")]
    Favorites,
    #[serde(rename = "reportScore")]
    ReportScore,
    #[serde(rename = "reportCount")]
    ReportCount,
    #[serde(rename = "publicationDate")]
    PublicationDate,
    #[serde(rename = "labsPublicationDate")]
    LabsPublicationDate,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "_created_at")]
    CreatedAt,
    #[serde(rename = "updated")]
    Updated,
    #[serde(rename = "_updated_at")]
    UpdatedAt,
    #[serde(rename = "order")]
    Order,
    #[serde(rename = "relevance")]
    Relevance,
    #[serde(rename = "magic")]
    Magic,
    #[serde(rename = "name")]
    Name,
}

impl std::fmt::Display for SortOption {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Popularity => write!(f, "popularity"),
            Self::Heat => write!(f, "heat"),
            Self::Trust => write!(f, "trust"),
            Self::Shuffle => write!(f, "shuffle"),
            Self::Random => write!(f, "random"),
            Self::Favorites => write!(f, "favorites"),
            Self::ReportScore => write!(f, "reportScore"),
            Self::ReportCount => write!(f, "reportCount"),
            Self::PublicationDate => write!(f, "publicationDate"),
            Self::LabsPublicationDate => write!(f, "labsPublicationDate"),
            Self::Created => write!(f, "created"),
            Self::CreatedAt => write!(f, "_created_at"),
            Self::Updated => write!(f, "updated"),
            Self::UpdatedAt => write!(f, "_updated_at"),
            Self::Order => write!(f, "order"),
            Self::Relevance => write!(f, "relevance"),
            Self::Magic => write!(f, "magic"),
            Self::Name => write!(f, "name"),
        }
    }
}

impl Default for SortOption {
    fn default() -> SortOption {
        Self::Popularity
    }
}

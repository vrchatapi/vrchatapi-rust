/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InventoryMetadata {
    /// Only in bundles
    #[serde(
        rename = "inventoryItemsToInstantiate",
        skip_serializing_if = "Option::is_none"
    )]
    pub inventory_items_to_instantiate: Option<Vec<String>>,
    #[serde(rename = "animated", skip_serializing_if = "Option::is_none")]
    pub animated: Option<bool>,
    #[serde(rename = "animationStyle", skip_serializing_if = "Option::is_none")]
    pub animation_style: Option<String>,
    #[serde(rename = "assetBundleId", skip_serializing_if = "Option::is_none")]
    pub asset_bundle_id: Option<String>,
    #[serde(rename = "fileId", skip_serializing_if = "Option::is_none")]
    pub file_id: Option<String>,
    #[serde(rename = "imageUrl", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "maskTag", skip_serializing_if = "Option::is_none")]
    pub mask_tag: Option<String>,
    #[serde(rename = "propId", skip_serializing_if = "Option::is_none")]
    pub prop_id: Option<String>,
}

impl InventoryMetadata {
    pub fn new() -> InventoryMetadata {
        InventoryMetadata {
            inventory_items_to_instantiate: None,
            animated: None,
            animation_style: None,
            asset_bundle_id: None,
            file_id: None,
            image_url: None,
            mask_tag: None,
            prop_id: None,
        }
    }
}

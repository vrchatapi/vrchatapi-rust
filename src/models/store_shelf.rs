/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StoreShelf {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "listingIds")]
    pub listing_ids: Vec<String>,
    #[serde(rename = "listings", skip_serializing_if = "Option::is_none")]
    pub listings: Option<Vec<models::ProductListing>>,
    #[serde(rename = "shelfDescription")]
    pub shelf_description: String,
    #[serde(rename = "shelfLayout")]
    pub shelf_layout: String,
    #[serde(rename = "shelfTitle")]
    pub shelf_title: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl StoreShelf {
    pub fn new(
        id: String,
        listing_ids: Vec<String>,
        shelf_description: String,
        shelf_layout: String,
        shelf_title: String,
        updated_at: String,
    ) -> StoreShelf {
        StoreShelf {
            id,
            listing_ids,
            listings: None,
            shelf_description,
            shelf_layout,
            shelf_title,
            updated_at,
        }
    }
}
